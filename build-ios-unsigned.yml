name: Build iOS (unsigned IPA)

# Run on every push to main + on demand (workflow_dispatch)
on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  # ───── project‑specific knobs ─────
  GODOT_VERSION: 4.4.1-stable # dont forget update export templates if bumping this version
  IOS_PRESET:    iOS          # export‑preset name in Godot
  NAME:          ${{ github.event.repository.name }}
  # speed: stop brew from auto‑updating every run
  HOMEBREW_NO_AUTO_UPDATE: 1

jobs:
  build-ios:
    runs-on: macos-14      # Apple Silicon runner w/ Xcode 16
    timeout-minutes: 30

    steps:
    # 0. Pull repo
    - name: Checkout
      uses: actions/checkout@v4
      with:
        lfs: true 

    # 1. Get headless Godot
    - name: Download Godot headless
      run: |
        curl -L \
          "https://github.com/godotengine/godot-builds/releases/download/${GODOT_VERSION}/Godot_v${GODOT_VERSION}_macos.universal.zip" \
          -o godot.zip
        unzip -q godot.zip -d godot
        
    # 2. Copy iOS export template from repo folder
    #    To save some bandwidth, I decided to store export template in the repository. (180 MB vs over 1 GB)
    #    The ios.zip template must be stored in folder called export_templates/{godot-version}/
    #    The godot version uses a dash in the name but export template uses a dot.
    #    E.g.: /export_templates/4.4.1.stable/ios.zip
    - name: Install iOS export template
      run: |
        templates_root="$HOME/Library/Application Support/Godot/export_templates"
        mkdir -p "$templates_root"
        cp -R "export_templates/." "$templates_root/"
    # 3. Export preset → Xcode project
    #    In addition to other mandatory fields (try running the export locally first),
    #    you need to enable `application/export_project_only=true` and `application/delete_old_export_files_unconditionally=true`.
    #    You can find these options in Advanced Options.
    - name: Export to Xcode project
      run: |
        mkdir -p build/ios
        godot/Godot.app/Contents/MacOS/Godot --headless --path . \
          --export-release "${IOS_PRESET}" build/ios/${NAME}.xcodeproj
    # 4. Build unsigned archive (mirrors mak448a/build‑ios)
    - name: xcodebuild archive (unsigned)
      run: |
        xcodebuild archive \
          -project build/ios/${NAME}.xcodeproj \
          -scheme "${NAME}" \
          -archivePath build/ios/App.xcarchive \
          -configuration Release \
          CODE_SIGN_STYLE=Manual \
          CODE_SIGN_IDENTITY="" \
          PROVISIONING_PROFILE_SPECIFIER="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          | xcpretty
    # 5. Package .ipa
    - name: Package IPA
      run: |
        cd build/ios
        mkdir -p Payload
        cp -R App.xcarchive/Products/Applications/*.app Payload/
        zip -r "${NAME}.ipa" Payload
        mv "${NAME}.ipa" ../../
    # 6. Publish artifact
    - name: Upload IPA artifact
      uses: actions/upload-artifact@v4
      with:
        name: unsigned-ipa
        path: ${{ env.NAME }}.ipa
        retention-days: 14
        
    # Now you can download the build from the pipeline and use a sideload store to 
    #    load it to your iPhone/iPad. You can use AltStore classic, for example.
    #    You can follow the guide for VCMI - https://vcmi.eu/players/Installation_iOS/
